function getPromptForStructure(
  indexStructure,
  documentType,
  topic,
  length,
  additionalInfo
) {
  const basePrompt = `Genera un √≠ndice para un ${documentType} sobre "${topic}". 
El documento ser√° de ${length} p√°ginas.`;

  const structureInstructions = {
    estandar: `
IMPORTANTE: Usa EXACTAMENTE esta estructura:
[T√≠tulo]
1. Introducci√≥n
   1.1 [Subtemas]
2. Desarrollo
   2.1 [Subtemas]
3. Conclusiones
   3.1 [Subtemas]
4. Referencias bibliogr√°ficas`,

    capitulos: `
IMPORTANTE: Usa EXACTAMENTE esta estructura:
[T√≠tulo]
CAPITULO I: [Nombre]
1.1 [Subtemas]
1.2 [Subtemas]

CAPITULO II: [Nombre]
2.1 [Subtemas]
2.2 [Subtemas]

CAPITULO III: [Nombre]
3.1 [Subtemas]
3.2 [Subtemas]

CAPITULO IV: [Nombre]
4.1 [Subtemas]
4.2 [Subtemas]

Referencias bibliogr√°ficas`,

    academica: `
IMPORTANTE: Usa EXACTAMENTE esta estructura:
[T√≠tulo]
I. Introducci√≥n
   1.1 Planteamiento del problema
   1.2 Justificaci√≥n

II. Objetivos
   2.1 Objetivo general
   2.2 Objetivos espec√≠ficos

III. Marco Te√≥rico
    3.1 Antecedentes
    3.2 Bases te√≥ricas

IV. Metodolog√≠a
    4.1 Tipo de investigaci√≥n
    4.2 T√©cnicas e instrumentos

V. Resultados y Discusi√≥n
   5.1 Presentaci√≥n de resultados
   5.2 An√°lisis de hallazgos

VI. Conclusiones
    6.1 Conclusiones
    6.2 Recomendaciones

VII. Referencias Bibliogr√°ficas`,
  };

  return `${basePrompt}
  
${structureInstructions[indexStructure] || structureInstructions.estandar}
  
Informaci√≥n adicional a considerar: ${
    additionalInfo || "No hay informaci√≥n adicional"
  }
  
IMPORTANTE: Mant√©n EXACTAMENTE la estructura y formato de numeraci√≥n indicados arriba.
Genera solo el √≠ndice, sin explicaciones adicionales.`;
}

function generateFallbackIndex({
  documentType,
  topic,
  length,
  indexStructure,
}) {
  const title = topic.toUpperCase();

  // Determinar si es un documento extenso basado en los nuevos rangos
  const isLongDocument = length === "20-30" || length === "30-45";

  const structures = {
    estandar: `${title}

1. Introducci√≥n
   1.1 Contextualizaci√≥n
   1.2 Objetivos
   1.3 Justificaci√≥n

2. Desarrollo
   2.1 Subtema principal
   2.2 An√°lisis detallado
   ${
     isLongDocument
       ? "2.3 Desarrollo extendido\n   2.4 An√°lisis complementario"
       : ""
   }

3. Conclusiones
   3.1 S√≠ntesis de hallazgos
   3.2 Consideraciones finales
   ${isLongDocument ? "3.3 Recomendaciones" : ""}

4. Referencias bibliogr√°ficas`,

    capitulos: `${title}

CAPITULO I: ASPECTOS INTRODUCTORIOS
1.1 Introducci√≥n al tema
1.2 Contexto hist√≥rico
${isLongDocument ? "1.3 Antecedentes relevantes" : ""}

CAPITULO II: DESARROLLO CONCEPTUAL
2.1 Desarrollo conceptual
2.2 An√°lisis detallado
${isLongDocument ? "2.3 Profundizaci√≥n tem√°tica" : ""}

CAPITULO III: AN√ÅLISIS Y DISCUSI√ìN
3.1 An√°lisis de resultados
3.2 Discusi√≥n de hallazgos
${isLongDocument ? "3.3 Interpretaci√≥n extendida" : ""}

CAPITULO IV: CONCLUSIONES
4.1 Conclusiones
4.2 Recomendaciones
${isLongDocument ? "4.3 Perspectivas futuras" : ""}

Referencias bibliogr√°ficas`,

    academica: `${title}

I. INTRODUCCI√ìN
   1.1 Planteamiento del problema
   1.2 Justificaci√≥n
   ${isLongDocument ? "1.3 Alcance del estudio" : ""}

II. OBJETIVOS
   2.1 Objetivo general
   2.2 Objetivos espec√≠ficos

III. MARCO TE√ìRICO
   3.1 Antecedentes
   3.2 Bases te√≥ricas
   ${isLongDocument ? "3.3 Estado del arte" : ""}

IV. METODOLOG√çA
   4.1 Tipo de investigaci√≥n
   4.2 T√©cnicas e instrumentos
   ${isLongDocument ? "4.3 Procedimientos metodol√≥gicos" : ""}

V. RESULTADOS Y DISCUSI√ìN
   5.1 Presentaci√≥n de resultados
   5.2 An√°lisis de hallazgos
   ${isLongDocument ? "5.3 Discusi√≥n extendida" : ""}

VI. CONCLUSIONES
   6.1 Conclusiones
   6.2 Recomendaciones
   ${isLongDocument ? "6.3 L√≠neas futuras de investigaci√≥n" : ""}

VII. REFERENCIAS BIBLIOGR√ÅFICAS`,
  };

  return structures[indexStructure] || structures.estandar;
}

// Modificaci√≥n del endpoint de generaci√≥n de √≠ndice
app.post("/api/generate-index", async (req, res) => {
  try {
    console.log("üöÄ Solicitud de generaci√≥n de √≠ndice recibida");
    console.log("üì¶ Datos recibidos:", JSON.stringify(req.body, null, 2));
    console.log("üîç Origen:", req.get("origin"));

    // Establecer cabeceras CORS expl√≠citamente
    res.header("Access-Control-Allow-Origin", "*");
    res.header("Access-Control-Allow-Credentials", "true");
    res.header("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
    res.header(
      "Access-Control-Allow-Headers",
      "Origin, X-Requested-With, Content-Type, Accept, Authorization"
    );

    const {
      documentType,
      topic,
      length,
      indexStructure = "estandar",
      additionalInfo = "",
    } = req.body;

    // Validaci√≥n de campos requeridos
    if (!documentType || !topic || !length || !indexStructure) {
      console.error("‚ùå Campos requeridos faltantes");
      return res.status(400).json({
        error: "Campos requeridos faltantes",
        received: req.body,
      });
    }

    // Verificar API key de Claude
    if (!process.env.CLAUDE_API_KEY) {
      console.error("‚ùå CLAUDE_API_KEY no configurada");
      return res.status(500).json({
        error: "Error de configuraci√≥n del servidor",
        details: "API key no configurada",
      });
    }

    // Generar prompt espec√≠fico para la estructura
    const prompt = getPromptForStructure(
      indexStructure,
      documentType,
      topic,
      length,
      additionalInfo
    );

    console.log("Prompt generado:", prompt);

    // Consulta a la API de Claude
    const response = await fetch("https://api.anthropic.com/v1/messages", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-API-Key": process.env.CLAUDE_API_KEY,
        "anthropic-version": "2023-06-01",
      },
      body: JSON.stringify({
        model: "claude-3-haiku-20240307",
        max_tokens: 4096,
        messages: [
          {
            role: "user",
            content: prompt,
          },
        ],
      }),
    });

    // Manejo de respuesta de Claude
    if (!response.ok) {
      console.error("Error de Claude:", response.status);
      // Usar fallback con la estructura correcta
      const fallbackIndex = generateFallbackIndex({
        documentType,
        topic,
        length,
        indexStructure,
      });

      return res.status(200).json({
        index: fallbackIndex,
        source: "fallback",
      });
    }

    // Procesar respuesta de Claude
    const data = await response.json();
    return res.status(200).json({
      index: data.content[0].text,
      source: "claude",
    });
  } catch (error) {
    console.error("üö® Error completo en generaci√≥n de √≠ndice:", error);

    // En caso de cualquier error, usar el √≠ndice de respaldo
    const fallbackIndex = generateFallbackIndex(req.body);
    return res.status(200).json({
      index: fallbackIndex,
      source: "fallback",
    });
  }
});
